initialize()
{
    //remove these constants from your version since this stuff should all be set on the command line
    defineConstant("mutLoc", asInteger(physLen/2));
    defineConstant("sweepDuration", 200); //NOTE: everything will work so long as samplingInterval*numSamples is less than this value; so whatever the max value of that product will be of all the combinations you are using, just make sure this is >= to that
    initializeMutationRate(1e-7);
    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, physLen-1);
    initializeRecombinationRate(1e-7);
    
    defineConstant("contractSize", 2000);
    defineConstant("recoverSize", 20000);

    defineConstant("burnTime", 20*burnPopSize);
    defineConstant("contractTime", burnTime);
    defineConstant("recoverTime", contractTime+500);
    defineConstant("sampleTime", recoverTime+3000);

    defineConstant("mutTime", sampleTime);
    defineConstant("ssvTime", mutTime); 
    defineConstant("simEndTime", mutTime+sampGens[size(sampGens)-1]);
    defineConstant("samplingTime", mutTime+sampGens[0]); 

    // introduced mutation's selection coefficient
    initializeMutationType("m2", 0.5, "f", selCoeff);

    defineConstant("restartTime", mutTime-burnPopSize);
    
}


s1 200 late()
{
    cat("Contracting at generation:"+ sim.generation + "\n");
    p1.setSubpopulationSize(contractSize);
}

s2 300 late()
{
    cat("Recovering at generation:"+ sim.generation + "\n");
    p1.setSubpopulationSize(recoverSize);
}


s3 1000 late()
{  
    if (sweep == "sdn")
    {
        // introduce the sweep mutation
        target = sample(p1.genomes, 1);
        cat("INTRODUCED MUTATION at gen " + sim.generation + " with 2Ns = " + 2*burnPopSize*selCoeff + "\n");
        target.addNewDrawnMutation(m2, mutLoc);
    }
    
    if (sweep == "ssv")
    {
        muts = sim.mutationsOfType(m1);
        if (size(muts))
        {
            mut = NULL;
            minDist = physLen+1;
            for (m in muts)
            {
                dist = abs(m.position-mutLoc);
                if (dist < minDist)
                {
                    minDist = dist;
                    mut = m;
                }
            }
            
            cat("chosen mut:" + mut.id + "\n");
            mut.setMutationType(m2);
            mut.setSelectionCoeff(selCoeff);
            cat(simID + ": chose polymorphism at position " + mut.position + " and frequency " + sim.mutationFrequencies(p1, mut) + " to become beneficial at generation " + sim.generation + "\n\n");

        }
        else
        {
            cat(simID + ": failed to switch from neutral to beneficial at gen " + sim.generation + "\n");
        }
    }
}

s4 1000:10000 late()
{
    if (sweep == "sdn" | (sweep == "ssv" & sim.generation > ssvTime))
    {
        fixed = (sum(sim.substitutions.mutationType == m2) == 1);
        if (fixed)
        {
            sim.deregisterScriptBlock(self);
        }
        else
        {
            muts = sim.mutationsOfType(m2);
            if (size(muts) == 0)
            {
                cat(simID + ": LOST at gen " + sim.generation + "\n");

                // Go back to generation 1000 or ssvGen
                sim.readFromPopulationFile(dumpFile);

                // Start a newly seeded run
                setSeed(rdunif(1, 0, asInteger(2^32) - 1));
                
                cat("RESTARTING WITH SEED: " + getSeed() + "\n");
            }
        }
    }
}

s5 10000:15000 late()
{
    m1.convertToSubstitution = F;
    m2.convertToSubstitution = F;
    
    if (any(mutTime+sampGens==sim.generation))
    {
        if (sweep == "sdn" | sweep == "ssv")
        {   
            if (sim.generation > mutTime)
            {
                muts = sim.mutationsOfType(m2);
                if (size(muts) > 0)
                {
                    freq1 = sim.mutationFrequencies(p1, muts)[0];
                    cat("SEGREGATING at " + freq1 + "\n");
                }
                else
                {
                    fixed = (sum(sim.substitutions.mutationType == m2) == 1);
                    cat("NO LONGER SEGREGATING at generation " + sim.generation + "; mut was " + ifelse(fixed, "FIXED\n", "LOST\n") + "\n");
                }
            }
        }

        cat("Sampling at generation " + sim.generation + "\n");
        p1.outputVCFSample(sampleSizePerStep, replace=F, filePath=outFile, append=T);

        cat("Done emitting sample\n");

        if (sim.generation == simEndTime)
        {
            p1.outputVCFSample(size(sampGens)*sampleSizePerStep, replace=F, filePath=outFile+".final", append=F);
        }
    }
}

s6 15000 late()
{
    sim.simulationFinished();
}


1 early() {
    // set up our subpop
    sim.readFromPopulationFile(dumpFile);
    defineConstant("simID", seed);

    sim.rescheduleScriptBlock(s1, start=contractTime, end=contractTime);
    sim.rescheduleScriptBlock(s2, start=recoverTime, end=recoverTime); 
    sim.rescheduleScriptBlock(s3, start=mutTime, end=mutTime); // introducing mut
    sim.rescheduleScriptBlock(s4, start=mutTime, end=simEndTime); // checking on muts
    sim.rescheduleScriptBlock(s5, start=samplingTime, end=simEndTime); // sampling
    sim.rescheduleScriptBlock(s6, start=simEndTime, end=simEndTime); // wrapping up

    
}